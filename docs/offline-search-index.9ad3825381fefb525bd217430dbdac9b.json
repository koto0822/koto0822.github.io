[{"body":"# 新しい記事を作成 hugo new content/docs/hugo/hugo-cheet-sheet/index.md # サーバーモードで起動 (ドラフトも含める) hugo server -D # ビルド hugo ","categories":"","description":"Hugo用チートシートです。\n","excerpt":"Hugo用チートシートです。\n","ref":"/hugo/hugo-cheet-sheet/","tags":["Hugo","Cheet sheet"],"title":"Hugo Cheet Sheet"},{"body":"# すべてのPodを停止 kubectl scale --replicas=0 deployment/\u003cyour-deployment\u003e # Podを一つだけにする kubectl scale --replicas=1 deployment/\u003cyour-deployment\u003e ","categories":"","description":"k8s用チートシート。\n","excerpt":"k8s用チートシート。\n","ref":"/k8s/k8s-cheet-sheet/","tags":["k8s","Cheet sheet"],"title":"k8s Cheet Sheet"},{"body":"Scoopとは Scoopはコマンドラインで実行できるアプリケーション管理ツールです。 Scoopを使うとアプリケーションのインストール・アンインストール・アップデートがコマンドひとつで簡単に実行できます。 うっとうしいUACポップアップやインストールウィザードが表示されることがなくなります。\nScoopのインストール PowerShellを起動して，以下のコマンドを実行します。\nSet-ExecutionPolicy RemoteSigned -scope CurrentUser -force Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh') 以上でインストールは終わりです。\nアプリケーションのインストールとアンインストール Scoopを使ってアプリケーションをインストールするには install コマンドを使います。 例えばgitをインストールするには以下のコマンドをコマンドプロンプトで実行します。\nscoop install git 逆にアンインストールする場合は uninstall コマンドを使います。\nscoop uninstall git bucketの追加 Scoopで管理するアプリケーション群はbucketというまとまりごとに分けられています。 bucketの一覧は Known application buckets にあります。\nインストール直後は main bucketだけが管理対象となっています。 使いたいアプリケーションが main 以外のbucketに入っている場合は，そのbucketを管理対象に追加しないといけません。 例えば extras bucketを追加したい場合は以下のコマンドを実行します。\nscoop bucket add extras これで extras bucketに含まれるアプリケーションも簡単にインストールできるようになります。 例えば extras bucketに含まれる everything や heidisql をインストールするには以下のコマンドを実行します。\nscoop install everything heidisql とりあえず extras bucketは追加しておいたほうが良いと思います。 Javaで開発をしている場合は java bucketを追加しておくと，各種JDKが簡単にインストールできます。\nScoopのアップデート Scoopをアップデートするには以下のコマンドを実行します。\nscoop update アプリケーションをアップデート Scoopでインストールしたアプリケーションをアップデートするには以下のコマンドを実行します。\nscoop update * 参考 Scoop公式 ","categories":"","description":"Scoopの使い方です。\n","excerpt":"Scoopの使い方です。\n","ref":"/scoop/use-scoop/","tags":"","title":"Scoopの使い方"},{"body":"利点 大きな利点は以下のとおりです。\n超高速に閲覧可能なサイトを構築できる 編集してGitHubにpushするだけで公開できる 細かい利点は以下のとおりです。\nmarkdownでページを記述できる ページ一覧や目次を勝手に作ってくれる 編集結果をローカルですぐに確認できる 編集履歴をGitHubで管理できる 前提 Windows 10でscoopとgitがインストールされている環境が前提です。 ただ，MacOSやLinuxでもscoopのところをhomebrewやaptなどで読み替えれば，同じような感じでできるかと思います。\nHugo 静的サイトジェネレータであるHugoのセットアップをします。 テーマはこのサイトでも使っているDocsyを使用します。\nインストール 以下のコマンドでインストールします。\nscoop install hugo-extended Docsyテーマを使う場合 nodejs のインストールも必要です。 以下のコマンドでインストールできます。\nscoop install nodejs サイトの新規作成 以下のコマンドを実行してサイトを新規作成します。 myproject ディレクトリが作られます。\nhugo new site myproject Docsyテーマのセットアップ 以下のコマンドでサイトのテーマをDocsyテーマに設定します。\ncd myproject git init git submodule add https://github.com/google/docsy.git themes/docsy echo 'theme = \"docsy\"' \u003e\u003e config.toml git submodule update --init --recursive 以下のコマンドも実行しておきます。 npm init 実行時にいろいろと質問されますが適当でかまいません。\nnpm init npm install -D --save autoprefixer npm install -D --save postcss-cli 以下のコマンドでローカルでサイトをプレビューできます。\nhugo server ブラウザ http://localhost:1313 にアクセスすると以下のページが表示されます。\nホスティングサーバー サイトをホスティングするサーバの設定をします。\nsshの設定 GitHubからファイルを受け取れるようにsshの設定をします。 ホスティングサーバ側の設定としては公開鍵を登録してsshで接続できるようにします。\n以下はXSERVERでの手順です。\n鍵の生成 以下のコマンドで公開鍵を作成します。 今のところOPENSSH形式だと問題が起こりがちなので，古いPEM形式で生成しています。\nssh-keygen -t rsa -b 4096 -m pem ファイル名はなんでも構いません。ここでは xserver と入力したものとします。 パスフレーズを聞かれますが，何も入力せずにEnterキーを押してください。\nコマンドが終了すると xserver と xserver.pub のふたつのファイルが作成されます。 xserver は秘密鍵，xserver.pub 公開鍵と呼びます。\nXSERVERに公開鍵を登録 まずSSHを有効にします。 サーバーパネルにSSH設定というページがあるのでそこで有効にしてください。\nSSHを有効にしたら公開鍵を登録します。 “公開鍵登録・更新\"タブを選択して xserver.pub ファイルの中身をコピーアンドペーストします。\nSSH接続確認 以下のコマンドでsshで接続できるか確認します。 ~/.ssh/xserver のところは作成した秘密鍵ファイル，karkn のところは自分のアカウント，sv10000.xserver.jp のところは接続するホスト名に読み替えてください。\nssh -i ~/.ssh/xserver -p10022 karkn@sv10000.xserver.jp GitHub リポジトリの作成 サイトのソースコードを格納するためのリポジトリを作成します。 詳細な手順は割愛します。 ここでは myproject というリポジトリを作成したものとします。\nSecretsの設定 リポジトリの Settings タブの Secrets ページでSecretを追加します。 Name は SSH_PRIVATE_KEY，Value には xserver ファイルの中身をコピーアンドペーストして貼り付けます。\nGitHub Actions ワークフローの設定 GitHub Actionsを使って，masterブランチにpushするたびに自動的にサイトをビルドして，ホスティングサーバにアップロードするようなワークフローを設定します。 myproject ディレクトリの下に .github/workflows/deploy.yml というファイルを作成して以下の内容を記述します。 最後の rsync の接続情報などは適宜読み替えてください。\nname: deploy to xserver on: push: branches: - master jobs: deploy: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 with: submodules: recursive # Fetch the Docsy theme fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: '0.74.2' extended: true - name: Setup Node uses: actions/setup-node@v1 with: node-version: '12.x' - name: Cache dependencies uses: actions/cache@v1 with: path: ~/.npm key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} restore-keys: | ${{ runner.os }}-node- - run: npm ci - run: hugo --minify env: HUGO_ENV: production - name: ssh key generate run: echo \"$SSH_PRIVATE_KEY\" \u003e key \u0026\u0026 chmod 600 key env: SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} - name: rsync deploy run: | rsync -auzrv \\ -e \"ssh -i key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022\" \\ --delete \\ ./public/* karkn@sv00000.xserver.jp:/home/karkn/karkn.net/public_html/ \\ --exclude blog/ GitHub ActionsでHugoを使えるようにするために GitHub Actions for Hugo を使っています。\nリモートリポジトリの設定 ローカルの myproject をリモートリポジトリに紐づけます。 以下のコマンドを実行してください。 アカウントやリポジトリ名は適宜読み替えてください。\ngit remote add origin https://github.com/karkn/myproject.git GitHubにpush 以下のコマンドを実行してpushします。\ngit add . git commit -m \"initial commit\" git push GitHubでActionsタブで実行結果を見られます。\n結果確認 GitHub Actionsのワークフローが完了すると，ホスティングサーバでサイトが見られるようになっています。 ブラウザでアクセスして確認してみてください。\nサイトの修正 以降は簡単な手順でサイトの修正ができます。\nローカルで編集と確認 hugo server コマンドでローカルサーバーを起動して http://localhost:1313 にアクセスして表示を確認しながらサイトを修正します。 起動したままでも自動的にブラウザの表示に反映されます。 ただしページの追加や削除はうまく認識されないことがあり，Ctrl+C でいったん終了してから起動しなおすと認識されます。\nGitHubにpush 修正が終わったら以下のコマンドでGitHubリポジトリに修正をpushします。\ngit add . git commit -m \"add foobar\" git push 修正の確認 しばらくすると自動的にホスティングサーバの内容が更新されます。\n以上\n","categories":"","description":"HugoとGitHubで高速なサイトを構築，快適に運営する環境を作ります。\n","excerpt":"HugoとGitHubで高速なサイトを構築，快適に運営する環境を作ります。\n","ref":"/hugo/hugo-with-github/","tags":"","title":"HugoとGitHubでサイト運営"},{"body":"","categories":"","description":"","excerpt":"","ref":"/","tags":"","title":"Koto Docs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/cheet-sheet/","tags":"","title":"Cheet Sheet"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/hugo/","tags":"","title":"Hugo"},{"body":"","categories":"","description":"静的サイトジェネレータHugoについて。\n","excerpt":"静的サイトジェネレータHugoについて。\n","ref":"/hugo/","tags":"","title":"Hugo"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"Kubernetes (k8s) について。\n","excerpt":"Kubernetes (k8s) について。\n","ref":"/k8s/","tags":"","title":"k8s"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/k8s/","tags":"","title":"K8s"},{"body":"","categories":"","description":"アーキテクチャ設計について。\n","excerpt":"アーキテクチャ設計について。\n","ref":"/architecture/","tags":"","title":"アーキテクチャ設計"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/bash/","tags":"","title":"Bash"},{"body":"","categories":"","description":"Bashについて。\n","excerpt":"Bashについて。\n","ref":"/bash/","tags":"","title":"Bash"},{"body":"複数のbashプロセスでhistoryを共有するには .bashrc に以下の設定を記述します。\nPROMPT_COMMAND=\"history -a; history -c; history -r; $PROMPT_COMMAND\" shopt -u histappend 一行目で，コマンドを実行するたびに以下の処理を実行します。\nコマンド履歴をhistoryファイルに追記 メモリ上のコマンド履歴を消去 コマンド履歴をhistoryファイルから読み込み 二行目ではbashを終了したときにコマンド履歴をhistoryファイルに書き込まないように指定しています。\n","categories":"","description":"","excerpt":"複数のbashプロセスでhistoryを共有するには .bashrc に以下の設定を記述します。 …","ref":"/bash/share-history-with-multiple-processes/","tags":["bash"],"title":"複数のbashプロセスでhistoryを共有"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/kotlin/","tags":"","title":"Kotlin"},{"body":"","categories":"","description":"Kotlinについて。\n","excerpt":"Kotlinについて。\n","ref":"/kotlin/","tags":"","title":"Kotlin"},{"body":"問題 Kotlinでユニークかつ短いIDを作りたい。UUIDの文字列表現は長すぎる。\n解決策 UUIDを生成してそれをBase64でエンコードするのがお手軽。\n標準的なBase64だと + や / が使われてしまうので， Base64.getUrlEncoder() で取得したEncoderを使用します。 Base64.getUrlEncoder() で取得したEncoderは代わりに + や / の代わりに - と _ を使うのでファイル名やURLに使用できます。\nclass ShortUuid { fun generate(): String { val uuid = UUID.randomUUID(); val byteBuffer = ByteBuffer.wrap(ByteArray(16)) .putLong(uuid.mostSignificantBits) .putLong(uuid.leastSignificantBits) return Base64.getUrlEncoder() .withoutPadding() .encodeToString(byteBuffer.array()) } } 参考 short-uuid Are Base64 encoded UUIDs unique? ","categories":"","description":"Kotlinでユニークかつ短い文字列の作り方。\n","excerpt":"Kotlinでユニークかつ短い文字列の作り方。\n","ref":"/kotlin/kotlin-short-uuid/","tags":["Kotlin"],"title":"KotlinでShort UUIDを生成"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/next.js/","tags":"","title":"Next.js"},{"body":"","categories":"","description":"Next.jsについて。\n","excerpt":"Next.jsについて。\n","ref":"/nextjs/","tags":"","title":"Next.js"},{"body":"概要 Next.jsでRecoilを使って npm run dev すると以下の警告が表示される。\nExpectation Violation: Duplicate atom key \"xxx\". This is a FATAL ERROR in production. But it is safe to ignore this warning if it occurred because of hot module replacement. 無視しても問題ないが，他の出力が見えなくなってしまって邪魔になる。\n非表示にする方法 next-intercept-stdoutをインストール next-intercept-stdout をインストールする。\ncd path/to/your_nextjs_project npm i next-intercept-stdout next.config.jsを編集 const withInterceptStdout = require('next-intercept-stdout'); module.exports = withInterceptStdout( { reactStrictMode: true, // your configs... }, (text) =\u003e (text.includes('Duplicate atom key') ? '' : text), ); これで npm run dev してもRecoilの警告は表示されなくなる。\n以上\n","categories":"","description":"Next.jsの開発モードでRecoilがエラーを出力するのを表示されなくする方法。\n","excerpt":"Next.jsの開発モードでRecoilがエラーを出力するのを表示されなくする方法。\n","ref":"/nextjs/hide-recoil-error-on-nextjs/","tags":["Next.js","Recoil"],"title":"Next.jsの開発モードでRecoilのエラーが表示されないようにする"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/recoil/","tags":"","title":"Recoil"},{"body":"コマンドの実行したときの標準出力と標準エラーを両方捨てるには以下のようにリダイレクトします。\nyour_cmd \u003e /dev/null 2\u003e\u00261 ","categories":"","description":"標準出力と標準エラーの両方を非表示にする方法。\n","excerpt":"標準出力と標準エラーの両方を非表示にする方法。\n","ref":"/bash/hide-stdout-and-stderr/","tags":["bash"],"title":"標準出力と標準エラーを捨てる"},{"body":"例1 find . -type f -name \"kustomization*\" | grep base/ | xargs sed -i -e 's/deployment/resources/g' 対象: カレントディレクトリ以下 (サブディレクトリ下含む) にあるファイル \u0026 ファイル名が kustomization で始まる \u0026 パスに base/ を含む 置換: ファイル内の deployment という文字列を resources に置換 例2 find . -type f -name \"*.config\" -print0 | xargs grep -l foo | xargs sed -i \"s/yaml/yml/g\" 対象: カレントディレクトリ以下 (サブディレクトリ下含む)にあるファイル \u0026 拡張子が .config \u0026 ファイル内に foo という文字列を含むファイル 置換: yaml という文字列を yml に置換 ","categories":"","description":"複数のファイル内の文字列を一括置換するコマンドの例。\n","excerpt":"複数のファイル内の文字列を一括置換するコマンドの例。\n","ref":"/bash/batch-text-replace-in-directories/","tags":["bash"],"title":"複数のファイル内の文字列を一括置換"},{"body":"","categories":"","description":"Chromebookについて。 使用しているのはLenovo IdeaPad Duet Chromebookです。\n","excerpt":"Chromebookについて。 使用しているのはLenovo IdeaPad Duet Chromebookです。\n","ref":"/chromebook/","tags":"","title":"Chromebook"},{"body":"前提 Hugoの一般的な設定方法や使い方については Hugo を参照してください。\nローカル起動とChromeでの表示 ChromebookのLinuxの仕組みのため，hugo serverで起動しても， Chromeから http://localhost:1313 でうまくアクセスできません。\nHugoをローカル起動するには以下のコマンドを実行します。\nhugo server --bind=\"0.0.0.0\" --baseURL=\"http://penguin.linux.test\" Chromeで表示するには http://penguin.linux.test にアクセスします。\n以上\n","categories":"","description":"ChromebookのLinux上でHugoを使う方法を説明します。\n","excerpt":"ChromebookのLinux上でHugoを使う方法を説明します。\n","ref":"/chromebook/use-hugo-on-linux/","tags":"","title":"ChromebookでHugoを使う"},{"body":"環境 このページの内容は Lenovo IdeaPad Duet Chromebook で動作を確認しています。\nEmacsのインストール 以下のコマンドを実行してEmacsをインストールします。\nsudo apt-get update sudo apt-get install emacs mozcなどのインストール 以下のコマンドを実行します。 mozcは日本語入力用IMEです。 emacs-mozcやemacs-mozc-binはmozcをEmacsで使用するためのパッケージです。\nsudo apt-get install mozc emacs-mozc emacs-mozc-bin Emacsの設定 Packageのインストール ~/.emacs.d/init.el に以下の設定を記述します。\n;;; package (require 'package) (add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\")) (add-to-list 'package-archives '(\"marmalade\" . \"https://marmalade-repo.org/packages/\")) (package-initialize) デフォルトフォントの設定 ~/.emacs.d/init.el に以下の設定を記述します。 フォントのサイズは -10 の数字で指定できます。 インストールされているフォントは fc-list コマンドで調べられます。\n;;; frame (setq default-frame-alist '((font . \"Noto Sans Mono CJK JP-10\"))) mozcの設定 ~/.emacs.d/init.el に以下の設定を記述します。\n;;; mozc (require 'mozc) (set-language-environment \"Japanese\") (setq default-input-method \"japanese-mozc\") (prefer-coding-system 'utf-8) ;; かなキー，英数キーでIMEのON/OFFを設定できるようにする (global-set-key [henkan] (lambda () (interactive) (when (null current-input-method) (toggle-input-method)))) (global-set-key [muhenkan] (lambda () (interactive) (inactivate-input-method))) (defadvice mozc-handle-event (around intercept-keys (event)) (if (member event (list 'zenkaku-hankaku 'muhenkan)) (progn (mozc-clean-up-session) (toggle-input-method)) (progn ad-do-it))) (ad-activate 'mozc-handle-event) ;; IME ON/OFF時にカーソル色を変更 (add-hook 'input-method-activate-hook (lambda () (set-cursor-color \"orange\"))) (add-hook 'input-method-inactivate-hook (lambda () (set-cursor-color \"black\"))) mozcの変換候補表示の設定 emacs-mozcのデフォルトの設定では変換候補表示時の入力ラグが大きいので，mozc-popupを使うように設定します。\nmozc-popupのインストール まずEmacsで M-x を押して package-install と入力します。Install package: と表示されるので mozc-popup と入力します。\nmozc-popupの設定 次に ~/.emacs.d/init.el に以下の設定を記述します。\n;; 変換候補の表示にpopupを使用する (require 'mozc-popup) (setq mozc-candidate-style 'popup) シェルフに登録 シェルフにEmacsを登録します。\nemacs \u0026 コマンドを実行してEmacsを起動し，シェルフに固定します。\n全画面表示させるための設定 2020/09/01現在，chromebookのlinuxのEmacsは起動時にウィンドウ位置を指定できないようです。 default-frame-alist に top や left を指定しても， emacs コマンドの起動オプション -g を指定しても，表示位置には反映されません。 起動時のウィンドウサイズに応じて画面中央に表示されるように，勝手に位置調整されてしまいます。\nこのままでは使いにくいので，ここでは全画面にEmacsが表示されるように設定します。\n.local/share/applications/emacs.desktop というファイルを作成して以下の内容を記述します。 解像度によっては全画面より小さく表示されるので，その場合は Exec=/usr/bin/emacs -g 200x50 の 200x50 の数字を大きくしてください。\n[Desktop Entry] Name=Emacs GenericName=Emacs Exec=/usr/bin/emacs -g 200x50 Icon=emacs24 Type=Application Terminal=false emacs.desktop ファイルを保存したら，以下のコマンドを実行します。\nupdate-desktop-database Emacsを終了してシェルフのボタンから起動し直すとEmacsが全画面サイズで表示されます。\nmozcの設定 日本語入力システムであるmozcそのものの設定をします。\n以下のコマンドを実行してmozcツールをインストールします。\nsudo apt-get install mozc-utils-gui 以下のコマンドで設定ツールを起動します。\n/usr/lib/mozc/mozc_tool --mode=config_dialog \u0026 mozcでEmacsキーバインドを使えるように設定 https://github.com/proshunsuke/mozc-emacs の keymap-emacs.txt をダウンロードします。\n以下のコマンドで設定ツールを起動します。\n/usr/lib/mozc/mozc_tool --mode=config_dialog \u0026 Keymap style を Custom keymap にして，Customize... ボタンを押下します。\n表示されたダイアログの左下にある Edit \u003e Import from file... でダウンロードした keymap-emacs.txt を選択します。\n以上\n","categories":"","description":"ChromebookのLinux上でEmacsを使うための設定方法を説明します。 Emacsで日本語入力ができるところまで設定します。\n","excerpt":"ChromebookのLinux上でEmacsを使うための設定方法を説明します。 Emacsで日本語入力ができるところまで設定します。\n","ref":"/chromebook/use-emacs-on-linux/","tags":"","title":"ChromebookでEmacsを使う"},{"body":"","categories":"","description":"Windows用アプリケーション管理ソフトScoopについて。\n","excerpt":"Windows用アプリケーション管理ソフトScoopについて。\n","ref":"/scoop/","tags":"","title":"Scoop"},{"body":"Cmder CmderはWindows用コンソールエミュレータです。 コンソールを複数のタブで開いたり，分割表示できます。\nインストールするには以下のコマンドを実行します。\nscoop install cmder Git for Windows Git for WindowsはWindows用Gitアプリケーションです。 コマンドラインで実行できる git コマンドや， bash，sed，curlといった便利なコマンドラインアプリケーションがたくさん含まれています。\nインストールするには以下のコマンドを実行します。\nscoop install git k9s CUIベースのk8sクラスタ管理ツールです。 k8sを使っている人におすすめです。 PODの一覧を表示や，PODに対するDescribe表示，ログ表示，Shellの実行が簡単にできます。\nインストールするには以下のコマンドを実行します。\nscoop install k9s hugo-extended Hugoは静的サイトジェネレータです。 Hugo にも説明がありますのでご参照ください。\nインストールするには以下のコマンドを実行します。\nscoop install hugo-extended HeidiSQL HeidiSQLはデータベース管理ツールです。 RDBMSを使っている人におすすめです。\nMySQL Workbench 8をインストールしてしまうと，MySQL 5.7サーバに接続できなくなってしまったのでHeidiSQLを利用しています。 HeidiSQLはMySQL 5.7でも8でも問題なく接続できます。\nインストールするには以下のコマンドを実行します。\nscoop bucket add extras # 以前に実行済みであれば不要 scoop install heidisql AdoptOpenJDK 14 with Oracle HotSpot JVM AdoptOpenJDKは無償利用できるJDKです。 Javaで開発をしている人におすすめです。\nインストールするには以下のコマンドを実行します。\nscoop bucket add java # 以前に実行済みであれば不要 scoop install adopt14-hotspot ","categories":"","description":"Scoopでインストールできるおすすめアプリケーションの紹介です。\n","excerpt":"Scoopでインストールできるおすすめアプリケーションの紹介です。\n","ref":"/scoop/recommended-apps-by-scoop/","tags":"","title":"Scoopでインストールできるおすすめアプリ"},{"body":"config.tomlの編集 まず日付のフォーマットを指定します。\n日付のフォーマットは config.toml の params.time_format_default で指定します。 指定方法は以下のとおりです。\n年は 2006 (4桁で表示) または 06 (下2桁で表示) 月は 01 (2桁になるように0で埋める) または 1 (0で埋めない) 日は 02 (2桁になるように0で埋める) または 2 (0で埋めない) 例えば 2020-08-22 という形式で表示したいときは以下のように指定します。\n[params] time_format_default = \"2006-01-02\" 2020年8月22日 という形式で表示したいときは以下のように指定します。\n[params] time_format_default = \"2006年1月2日\" page-meta-lastmod.htmlの作成 layouts/partials/page-meta-lastmod.html というファイルを作成して表示したい内容を記述します。 例えば 最終更新 2020-08-22 と表示したい場合は以下のように記述します。\n{{ T \"post_last_mod\"}} {{ .Lastmod.Format .Site.Params.time_format_default }} ちなみにDocsyテーマでのもともとの定義は以下のとおりで， 最終更新 2020-08-22: コード例を修正 (53670a5) といった表示になります。\n{{ T \"post_last_mod\"}} {{ .Lastmod.Format .Site.Params.time_format_default }}{{ with .GitInfo }}: \u003ca href=\"{{ $.Site.Params.github_repo }}/commit/{{ .Hash }}\"\u003e{{ .Subject }} ({{ .AbbreviatedHash }})\u003c/a\u003e{{end }} 私は後半部分のGitHubへのリンクを張りたくないのでばっさり削除しました。\n以上\n","categories":"","description":"Docsyテーマを使っていて `enableGitInfo = true` としているときに，ページ下部に表示される最終更新の日付の表示を変更する方法です。\n","excerpt":"Docsyテーマを使っていて `enableGitInfo = true` としているときに，ページ下部に表示される最終更新の日付の表示を変 …","ref":"/hugo/change-docsy-lastmod-format/","tags":"","title":"Docsyで最終更新の表示を変更"},{"body":"文字列を含むか判定 ある文字列にある文字列が含まれるかを判定するには以下のように if を記述します。\nSTR='GNU/Linux is an operating system' SUB='Linux' if [[ \"$STR\" == *\"$SUB\"* ]]; then echo \"It's there.\" fi OSの判定 OSを判定するには uname コマンドを使います。\nif [[ \"$(uname)\" == *'Linux'* ]]; then echo \"linux\" elif [[ \"$(uname)\" == *'Darwin* ]]; then echo \"mac\" elif [[ \"$(uname)\" == *'MINGW64'* ]]; then echo \"win\" fi 変数の空文字判定 変数が空文字かを判定するには以下のように if を記述します。 変数を\"“で囲む必要があることに注意。\nSTRING変数が空または空文字でないかどうか。\nif [ -n \"$STRING\" ]; then # 空でないときの処理 fi STRING変数が空または空文字かどうか。\nif [ -z \"$STRING\" ]; then # 空のときの処理 fi 変数の大文字化/小文字化 変数の大文字化または小文字化。\n記述 説明 例 ${v^} 大文字化(１文字目のみ) v=\"ho ge\"; echo ${v^}→Ho ge ${v^^} 大文字化(全文字) v=\"ho ge\"; echo ${v^^}→HO GE ${v,} 小文字化(１文字目のみ) v=\"HO GE\"; echo ${v,}→hO GE ${v,,} 小文字化(全文字) v=\"HO GE\"; echo ${v,,}→ho ge ${v~} 大小反転(１文字目のみ※) v=\"ho GE\"; echo ${v~}→Ho gE ${v~~} 大小反転(全文字) v=\"ho GE\"; echo ${v~~}→HO GE コマンド補完時に大文字小文字を区別しない .inputrc に以下を追加します。\nset completion-ignore-case on ","categories":"","description":"Bash Shell ScriptのTips。\n","excerpt":"Bash Shell ScriptのTips。\n","ref":"/bash/bash-shell-script-tips/","tags":["Bash","Shell Script"],"title":"Bash Shell Script Tips"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/git/","tags":"","title":"Git"},{"body":"","categories":"","description":"Gitについて。\n","excerpt":"Gitについて。\n","ref":"/git/","tags":"","title":"Git"},{"body":"書式 以下の書式でcommit commentを書く。\n\u003ctype\u003e[optional scope]: \u003cdescription\u003e [optional body] [optional footer] type typeには以下を指定する。\nfeat: 新しい機能 fix: バグの修正 imp: 機能を改善する change: 機能を変更する remove: 機能を削除 refactor: バグ修正や新しい機能の追加以外のコードの変更。コードを整理する perf: 性能を改善するコードの変更 build: ビルドシステムや外部ライブラリなどの依存に変更 ci: CIのための設定やスクリプトの変更 docs: ドキュメントだけの変更 style: コードの内容に影響のない変更 (フォーマットなどの変更) test: 不足しているテストの追加やテストの修正 chore: 雑多な修正 例 https://www.conventionalcommits.org/ja/v1.0.0-beta.4/#%E4%BE%8B から引用。\nfeat: allow provided config object to extend other configs BREAKING CHANGE: `extends` key in config file is now used for extending other config files chore!: drop Node 6 from testing matrix BREAKING CHANGE: dropping Node 6 which hits end of life in April docs: correct spelling of CHANGELOG feat(lang): add polish language fix: correct minor typos in code 参考 Conventional Commits Angular - Commit Message Guidelines gitにおけるコミットログ/メッセージ例文集100 ","categories":"","description":"Git commit commentの書き方のガイドライン。\n","excerpt":"Git commit commentの書き方のガイドライン。\n","ref":"/git/git-commit-comment/","tags":["Git"],"title":"Git commit commentのガイドライン"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/shell-script/","tags":"","title":"Shell Script"}]